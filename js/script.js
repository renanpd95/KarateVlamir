import { db } from './firebase-config.js';
import { collection, addDoc, getDocs } from "https://www.gstatic.com/firebasejs/10.14.0/firebase-firestore.js";
import { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword } from "https://www.gstatic.com/firebasejs/10.14.0/firebase-auth.js";

document.addEventListener("DOMContentLoaded", () => {
    const auth = getAuth();


  // Fun칞칚o para cadastrar um novo usu치rio
async function cadastrarUsuario(email, senha) {
    try {
        const userCredential = await createUserWithEmailAndPassword(auth, email, senha);
        const user = userCredential.user;

        // Adiciona o usu치rio ao Firestore com o campo isApproved como false
        await addDoc(collection(db, "usuarios"), {
            uid: user.uid,
            email: user.email,
            isApproved: false  // Usu치rio n칚o aprovado inicialmente
        });

        console.log("Usu치rio cadastrado com ID: ", user.uid);
        alert("Usu치rio cadastrado com sucesso! Aguarde a libera칞칚o do administrador.");
    } catch (error) {
        if (error.code === 'auth/email-already-in-use') {
            console.error("Erro: Este email j치 est치 em uso.");
            document.getElementById("signupErrorMessage").style.display = "block";
            document.getElementById("signupErrorMessage").textContent = "Este email j치 est치 cadastrado.";
        } else if (error.code === 'auth/weak-password') {
            console.error("Erro: A senha deve ter pelo menos 6 caracteres.");
            document.getElementById("signupErrorMessage").style.display = "block";
            document.getElementById("signupErrorMessage").textContent = "A senha deve ter pelo menos 6 caracteres.";
        } else {
            console.error("Erro ao cadastrar usu치rio: ", error);
            document.getElementById("signupErrorMessage").style.display = "block";
            document.getElementById("signupErrorMessage").textContent = error.message;
        }
    }
}

    
// Fun칞칚o para fazer login
    async function loginUsuario(email, senha) {
      try {
          // Remove espa칞os em branco
          email = email.trim();
          senha = senha.trim();

          // Tenta fazer login com o Firebase Authentication
          const userCredential = await signInWithEmailAndPassword(auth, email, senha);
          const user = userCredential.user;

          // Verifica se o usu치rio est치 aprovado no Firestore
          const querySnapshot = await getDocs(collection(db, "usuarios"));
          let isApproved = false;

          querySnapshot.forEach((doc) => {
              const userData = doc.data();
              if (userData.uid === user.uid) {
                  isApproved = userData.isApproved;
              }
          });

          if (!isApproved) {
              document.getElementById("errorMessage").style.display = "block";
              document.getElementById("errorMessage").innerHTML = "Poxa, que pena 游땩<br> O usu치rio ainda n칚o foi aprovado. Aguarde a aprova칞칚o.";
            } else {
              console.log("Login bem-sucedido!");
              // Redireciona o usu치rio para a p치gina desejada
              window.location.href = "pagina_alunos.html";
          }
      } catch (error) {
          console.error("Erro ao fazer login: ", error);

          // Trate os erros espec칤ficos
          if (error.code === 'auth/user-not-found' || error.code === 'auth/wrong-password') {
              document.getElementById("errorMessage").style.display = "block";
              document.getElementById("errorMessage").textContent = "Usu치rio ou senha inv치lidos."; // Mensagem unificada
          } else if (error.code === 'auth/too-many-requests') {
              document.getElementById("errorMessage").style.display = "block";
              document.getElementById("errorMessage").innerHTML = "Voc칡 foi bloqueado devido a muitas tentativas.<br> Entre em contato com o administrador.";
          } else if (error.code === 'auth/invalid-email') {
              document.getElementById("errorMessage").style.display = "block";
              document.getElementById("errorMessage").textContent = "Email inv치lido. Verifique o formato.";
          } else if (error.code === 'auth/invalid-credential') {
              document.getElementById("errorMessage").style.display = "block";
              document.getElementById("errorMessage").innerHTML = "Credenciais inv치lidas.<br> Verifique se o email e a senha est칚o corretos.";
          } else {
              document.getElementById("errorMessage").style.display = "block";
              document.getElementById("errorMessage").textContent = error.message; // Exibe mensagem de erro gen칠rica
          }
      }
}


    // Verifica se o formul치rio de cadastro existe
    const signupForm = document.getElementById('signupForm');
    if (signupForm) {
        signupForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const email = document.getElementById('email').value;
            const senha = document.getElementById('senha').value;

            // Chama a fun칞칚o de cadastro
            await cadastrarUsuario(email, senha);
        });
    }

    // Verifica se o formul치rio de login existe
    const loginForm = document.getElementById('loginForm');
    if (loginForm) {
        loginForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const email = document.getElementById('emailLogin').value;
            const senha = document.getElementById('senhaLogin').value;

            // Chama a fun칞칚o de login
            await loginUsuario(email, senha);
        });
    }
});
